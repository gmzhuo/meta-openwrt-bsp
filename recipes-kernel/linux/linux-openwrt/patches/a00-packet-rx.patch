From fc87ddffca8354e375c7797e80d5c281d2f2eec2 Mon Sep 17 00:00:00 2001
From: "gm.zhuo" <18414710@qq.com>
Date: Fri, 6 May 2022 15:28:30 +0800
Subject: [PATCH] check proto when set size_max

---
 net/packet/af_packet.c | 50 ++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 47 insertions(+)

diff --git a/net/packet/af_packet.c b/net/packet/af_packet.c
index c0d4a65931de..de2a51b90015 100644
--- a/net/packet/af_packet.c
+++ b/net/packet/af_packet.c
@@ -2663,6 +2663,11 @@ static int tpacket_parse_header(struct packet_sock *po, void *frame,
 	*data = frame + off;
 	return tp_len;
 }
+
+struct PACKET_TX_INFO {
+	u64 packet_tx_magic;
+	u64 packet_tx_flags;
+};
 
 static int tpacket_snd(struct packet_sock *po, struct msghdr *msg)
 {
@@ -2733,6 +2738,10 @@ static int tpacket_snd(struct packet_sock *po, struct msghdr *msg)
 	if ((size_max > dev->mtu + reserve + VLAN_HLEN) && !po->has_vnet_hdr)
 		size_max = dev->mtu + reserve + VLAN_HLEN;
 
+	if(msg->msg_flags & 0x800000) {
+		size_max += 36;
+	}
+
 	reinit_completion(&po->skb_completion);
 
 	do {
@@ -2821,6 +2830,11 @@ static int tpacket_snd(struct packet_sock *po, struct msghdr *msg)
 		packet_inc_pending(&po->tx_ring);
 
 		status = TP_STATUS_SEND_REQUEST;
+		if(msg->msg_flags & 0x800000) {
+			struct PACKET_TX_INFO* pinfo = (struct PACKET_TX_INFO*)&skb->cb;
+			pinfo->packet_tx_magic = 0xabcdabcd12341234;
+			pinfo->packet_tx_flags = 0x800000;
+		}
 		err = po->xmit(skb);
 		if (unlikely(err != 0)) {
 			if (err > 0)
@@ -3037,11 +3048,54 @@ static int packet_snd(struct socket *sock, struct msghdr *msg, size_t len)
 	return err;
 }
 
+static int packet_rx(struct socket *sock, struct msghdr *msg, size_t len)
+{
+	struct sk_buff *skb = NULL;
+	struct net_device *dev;
+	struct sock *sk = sock->sk;
+	int err;
+	size_t reserved;
+	int tlen;
+
+	DECLARE_SOCKADDR(struct sockaddr_ll *, saddr, msg->msg_name);
+	dev = dev_get_by_index(sock_net(sk), saddr->sll_ifindex);
+
+	if(!dev)
+		return -1;
+
+	reserved = LL_RESERVED_SPACE(dev);
+	tlen = dev->needed_tailroom;
+	skb = sock_wmalloc(sk, len + reserved + tlen, 0, GFP_KERNEL);
+	if(!skb) {
+		goto free_dev;
+	}
+
+	skb_reserve(skb, reserved);
+	skb_reset_network_header(skb);
+	err = memcpy_from_msg(skb_put(skb, len), msg, len);
+
+	skb->protocol = eth_type_trans(skb, dev);
+	skb->dev = dev;
+	netif_rx(skb);
+
+	err = len;
+
+free_dev:
+	if(dev) {
+		dev_put(dev);
+	}
+
+	return err;
+}
+
 static int packet_sendmsg(struct socket *sock, struct msghdr *msg, size_t len)
 {
 	struct sock *sk = sock->sk;
 	struct packet_sock *po = pkt_sk(sk);
 
+	if(msg->msg_flags & 0x200000)
+		return packet_rx(sock, msg, len);
+
 	/* Reading tx_ring.pg_vec without holding pg_vec_lock is racy.
 	 * tpacket_snd() will redo the check safely.
 	 */
-- 
2.25.1

